Parameters:
  ProjectName:
    Type: String
    Description: Name of the project this belongs to
  DatalakeStackName:
    Type: String
    Description: Stack name of the datalake
  VPCStackName:
    Type: String
    Description: The name of the VPC Stack

Resources:
  ComputeEnvironmentServiceRole:
    Type: AWS::IAM::Role
    Properties:
      PermissionsBoundary: !Sub "arn:aws:iam::${AWS::AccountId}:policy/DeveloperBoundary"
      Tags:
        - Key: Project
          Value: !Ref ProjectName
      AssumeRolePolicyDocument:
        {
          "Version": "2012-10-17",
          "Statement": [
          {
            "Effect": "Allow",
            "Principal": {
              "Service": "batch.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
          }
          ]
        }
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole"

  ComputeEnvironmentInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      PermissionsBoundary: !Sub "arn:aws:iam::${AWS::AccountId}:policy/DeveloperBoundary"
      Tags:
        - Key: Project
          Value: !Ref ProjectName
      AssumeRolePolicyDocument:
        {
          "Version": "2012-10-17",
          "Statement": [
          {
            "Sid": "",
            "Effect": "Allow",
            "Principal": {
              "Service": "ec2.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
          }
          ]
        }
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"
      Policies:
        - PolicyName: write-to-datalake
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource:
                  - Fn::ImportValue:
                      !Sub "${DatalakeStackName}-Arn"
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                Resource:
                  - Fn::Join:
                      - ""
                      - - Fn::ImportValue:
                            !Sub "${DatalakeStackName}-Arn"
                        - "/*"

  ComputeEnvironmentInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref ComputeEnvironmentInstanceRole

  ComputeEnvironmentSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EC2 Security Group for instances launched in the VPC by Batch
      VpcId:
        Fn::ImportValue:
          !Join ['-', [!Ref 'VPCStackName', 'VPC']]
      Tags:
        - Key: Project
          Value: !Ref ProjectName


  ComputeEnvironment:
    Type: AWS::Batch::ComputeEnvironment
    Properties:
      ComputeResources:
        DesiredvCpus: 0
        Ec2KeyPair: "tuco-key"
        ImageId: "ami-08c4be469fbdca0fa"
        InstanceRole: !Ref ComputeEnvironmentInstanceProfile
        InstanceTypes:
          - "optimal"
          - "c5.xlarge"
          - "c5.2xlarge"
          - "c5.4xlarge"
        MaxvCpus: 32
        MinvCpus: 0
        SecurityGroupIds:
          - !Ref ComputeEnvironmentSecurityGroup
        Subnets:
          - Fn::ImportValue:
              !Join ['-', [!Ref 'VPCStackName', 'PrivateSubnet1']]
        Type: "EC2"
      ServiceRole: !Ref ComputeEnvironmentServiceRole
      State: "ENABLED"
      Type: "MANAGED"

  ComputeEnvironmentJobQueue:
    Type: AWS::Batch::JobQueue
    Properties:
      Priority: 1
      ComputeEnvironmentOrder:
        - Order: 1
          ComputeEnvironment: !Ref ComputeEnvironment

Outputs:
  ComputeEnvironmentJobQueueArn:
    Description: ARN of ComputeEnvironment JobQueue
    Value: !Ref ComputeEnvironmentJobQueue
    Export:
      Name: !Sub '${AWS::StackName}-JobQueue-Arn'